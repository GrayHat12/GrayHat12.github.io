{"version":3,"sources":["BackendCoder.js","Terminal.js","App.js","serviceWorker.js","index.js"],"names":["Backend","state","message","steps","this","loop","Infinity","wrapper","className","React","Component","commands","echo","description","usage","fn","Array","from","arguments","join","resume","window","open","compiler","github","about","donate","facebook","twitter","instagram","linkedin","Germinal","welcomeMessage","promptLabel","errorText","autoFocus","App","images","0","1","2","3","4","5","6","7","8","how","time","size","background","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qPAuBeA,E,2MAlBXC,MAAQ,CACJC,QAAU,CAAC,QAAQ,IAAK,iBAAkB,KAAK,6CAA6C,KAChG,+BAAgC,IAAI,4BAA6B,IAAI,8BAA8B,IAAI,wBACvG,IAAK,oBAAoB,IAAI,yBAAe,O,wEAIxC,OACI,kBAAC,IAAD,CACAC,MAAOC,KAAKH,MAAMC,QAClBG,KAAMC,IACNC,QAAQ,IACRC,UAAW,a,GAdDC,IAAMC,W,iBCCtBC,EAAW,CACbC,KAAM,CACFC,YAAa,wBACbC,MAAO,gBACPC,GAAI,WACA,MAAM,GAAN,OAAUC,MAAMC,KAAKC,WAAWC,KAAK,QAG7CC,OAAQ,CACJP,YAAa,sBACbC,MAAO,SACPC,GAAI,WAAKM,OAAOC,KAAK,oDAAoD,YAE7EC,SAAU,CACNV,YAAa,uCACbC,MAAO,WACPC,GAAI,WAAKM,OAAOC,KAAK,wCAAwC,YAEjEE,OAAQ,CACJX,YAAa,+BACbC,MAAO,SACPC,GAAI,WAAKM,OAAOC,KAAK,+BAA+B,YAExDG,MAAO,CACHZ,YAAa,gBACbC,MAAO,QACPC,GAAI,WACA,MAAO,uWAGfW,OAAQ,CACJb,YAAa,YACbC,MAAQ,SACRC,GAAI,WAAKM,OAAOC,KAAK,sCAAsC,YAE/DK,SAAU,CACNd,YAAa,gBACbC,MAAO,WACPC,GAAI,WAAKM,OAAOC,KAAK,yCAAyC,YAElEM,QAAS,CACLf,YAAa,gBACbC,MAAO,WACPC,GAAI,WAAKM,OAAOC,KAAK,iCAAiC,YAE1DO,UAAW,CACPhB,YAAa,gBACbC,MAAO,WACPC,GAAI,WAAKM,OAAOC,KAAK,wCAAwC,YAEjEQ,SAAU,CACNjB,YAAa,gBACbC,MAAO,WACPC,GAAI,WAAKM,OAAOC,KAAK,sCAAsC,aAkBpDS,E,iLAZP,OACI,kBAAC,IAAD,CACIpB,SAAUA,EACVqB,eAAgB,2CAChBC,YAAa,eACbC,UAAY,mCACZC,UAAW,a,GARJ1B,IAAMC,W,iBC9Bd0B,MA1Bf,WACE,OACE,yBAAK5B,UAAU,OACb,kBAAC,IAAD,CACE6B,OAAQ,CACNC,EAAG,8DACHC,EAAG,sDACHC,EAAG,wDACHC,EAAG,sDACHC,EAAG,sDACHC,EAAG,sDACHC,EAAG,kDACHC,EAAG,0EACHC,EAAG,+DAELC,IAAK,GACLC,KAAM,IACNC,KAAM,OACNC,WAAY,sBAEd,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,MCdcC,QACW,cAA7B9B,OAAO+B,SAASC,UAEe,UAA7BhC,OAAO+B,SAASC,UAEhBhC,OAAO+B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e13c4e4d.chunk.js","sourcesContent":["import React from 'react';\r\nimport Typical from 'react-typical';\r\n\r\nclass Backend extends React.Component\r\n{\r\n    state = {\r\n        message : ['Hello',1000,'I\\'m GrayHat...',1200,'I work as a Backend Coder and Web Scraper.',1500,\r\n    'They\\'re my favorite actually',800,'So you\\'re finally here...',500,'Check out the console below',500,'Tell me what you want',\r\n    1000,'Use The Help menu',500,'ðŸ˜€ Good Luck',1500]\r\n    };\r\n    render()\r\n    {\r\n        return(\r\n            <Typical\r\n            steps={this.state.message}\r\n            loop={Infinity}\r\n            wrapper=\"p\"\r\n            className={'caca'}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default Backend;","import React from 'react';\r\nimport Terminal from 'react-console-emulator'\r\n\r\n\r\nconst commands = {\r\n    echo: {\r\n        description: 'Echo a passed string.',\r\n        usage: 'echo <string>',\r\n        fn: function () {\r\n            return `${Array.from(arguments).join(' ')}`\r\n        }\r\n    },\r\n    resume: {\r\n        description: 'Download my resume.',\r\n        usage: 'resume',\r\n        fn: ()=>{window.open('https://grayhat12.github.io/shared/RahulSingh.pdf','_blank')}\r\n    },\r\n    compiler: {\r\n        description: 'Open the Gray Compiler in a new page',\r\n        usage: 'compiler',\r\n        fn: ()=>{window.open('https://grayhat12.github.io/compiler/','_blank')}\r\n    },\r\n    github: {\r\n        description: 'Opens my Github Profile Page',\r\n        usage: 'github',\r\n        fn: ()=>{window.open('https://github.com/GrayHat12','_blank')}\r\n    },\r\n    about: {\r\n        description: 'Know about ME',\r\n        usage: 'about',\r\n        fn: function() {\r\n            return 'I\\'m GrayHat\\nI Love to code\\nDon\\'t expect much frontend from my part.\\nI\\'m good at backend though\\nCurrently a student at Sharda University but am open to Paid Projects\\nContact me at < grayhathacks10@gmail.com >\\nI specialize in :\\n1. > Web Scraping\\n2. > Web Development (Reactjs)\\n3. > App Development\\n4. > Desktop App Development\\n5. Bot Development' \r\n        }\r\n    },\r\n    donate: {\r\n        description: 'Donate ME',\r\n        usage : 'donate',\r\n        fn: ()=>{window.open('https://www.instamojo.com/@grayhat/','_blank')}\r\n    },\r\n    facebook: {\r\n        description: 'Facebook Page',\r\n        usage: 'facebook',\r\n        fn: ()=>{window.open('https://www.facebook.com/grayhathacks/','_blank')}\r\n    },\r\n    twitter: {\r\n        description: 'Facebook Page',\r\n        usage: 'facebook',\r\n        fn: ()=>{window.open('https://twitter.com/gray_rahul','_blank')}\r\n    },\r\n    instagram: {\r\n        description: 'Facebook Page',\r\n        usage: 'facebook',\r\n        fn: ()=>{window.open('https://www.instagram.com/gray_._hat/','_blank')}\r\n    },\r\n    linkedin: {\r\n        description: 'Facebook Page',\r\n        usage: 'facebook',\r\n        fn: ()=>{window.open('https://www.linkedin.com/in/grayhat','_blank')}\r\n    }\r\n}\r\n\r\nclass Germinal extends React.Component {\r\n    render() {\r\n        return (\r\n            <Terminal\r\n                commands={commands}\r\n                welcomeMessage={'Welcome to the Gray terminal! - Germinal'}\r\n                promptLabel={'gray@Site:~$'}\r\n                errorText = 'Invalid Command. Please use help'\r\n                autoFocus= 'true'\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default Germinal;","import React from 'react';\nimport Backend from './BackendCoder';\nimport Germinal from './Terminal';\nimport Sky from 'react-sky';\n\nfunction App() {\n  return (\n    <div className=\"App\" >\n      <Sky\n        images={{\n          0: 'https://grayhat12.github.io/favicon_io/apple-touch-icon.png',\n          1: 'https://image.flaticon.com/icons/svg/226/226777.svg',\n          2: 'https://image.flaticon.com/icons/svg/1822/1822899.svg',\n          3: 'https://image.flaticon.com/icons/svg/136/136530.svg',\n          4: 'https://image.flaticon.com/icons/svg/919/919825.svg',\n          5: 'https://image.flaticon.com/icons/svg/174/174836.svg',\n          6: 'https://cdn.worldvectorlogo.com/logos/react.svg',\n          7: 'https://seeklogo.com/images/F/firebase-logo-402F407EE0-seeklogo.com.png',\n          8: 'https://grayhat12.github.io/favicon_io/apple-touch-icon.png'\n        }}\n        how={40}\n        time={100}\n        size={'50px'}\n        background={'palettedvioletred'}\n      />\n      <Backend />\n      <Germinal />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}